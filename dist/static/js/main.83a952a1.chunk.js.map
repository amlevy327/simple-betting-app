{"version":3,"sources":["store/selectors.js","components/Navbar.js","components/Spinner.js","store/actions.js","store/interactions.js","components/CustomerDashboard.js","components/App.js","store/reducers.js","store/configureStore.js","reportWebVitals.js","index.js"],"names":["ADDRESS_0x0","account","state","get","accountSelector","createSelector","a","accountLoadedSelector","l","tokenLoadedSelector","w","tl","tokenSelector","t","tokenBalanceLoadedSelector","tokenBalanceSelector","tb","exchangeLoadedSelector","el","exchangeSelector","e","contractsLoadedSelector","exchangeTokenBalanceSelector","s","allBetsLoaded","allBets","acceptedBetsLoaded","ab","acceptedBets","cancelledBetsLoaded","cancelledBets","closedBetsLoaded","cb","closedBets","allBetTypesLoadedSelector","b","c","d","winnerSubmitted","winnerSubmittedSelector","createdBetsForAccountSelector","all","accepted","cancelled","closed","pendingBets","reject","bet","betAccepted","some","id","betCancelled","betClosed","filter","maker","taker","decorateCreatedBetsForAccount","console","log","map","addButtonText","buttonText","openBetsForAccountSelector","openBets","decorateOpenBetsForAccount","addSubmittedWinner","addUpdatedMakerTakerWinners","submittedWinner","i","length","winnerMaker","winnerTaker","updatedWinnerMaker","updatedWinnerTaker","closedBetsForAccountSelector","balancesLoadedSelector","eb","tokenDepositAmountSelector","amount","tokenWithdrawAmountSelector","newBetSelector","nb","Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","this","props","target","rel","Component","connect","web3AccountLoaded","tokenBalanceLoaded","tokenBalance","winnerSubmittedLoaded","exchangeTokenBalanceLoaded","exchangeTokenBalance","loadWeb3","dispatch","window","ethereum","web3","Web3","connection","alert","location","assign","loadAccount","eth","getAccounts","accounts","loadTokenContract","networkId","token","Contract","Token","abi","networks","address","contract","loadExchangeContract","exchange","Exchange","loadExchangeEvents","getPastEvents","fromBlock","toBlock","allBetsStream","event","returnValues","acceptedBetsStream","cancelledBetsStream","closedBetsStream","winnerSubmittedStream","loadBalances","methods","balanceOf","call","options","subscribeToEvents","events","Deposit","error","Withdraw","BetCreated","BetAccepted","BetCancelled","BetClosed","WinnerSubmitted","newBetForm","newBet","onSubmit","preventDefault","addressToken","addressTaker","amountMaker","amountTaker","name","createBet","send","from","on","hash","placeholder","onChange","value","required","showPendingBets","createdBets","onClick","completePendingBetAction","cancelBet","acceptBet","showActiveBets","activeBets","submitWinningAddress","winner","submitWinner","showClosedBets","balancesForm","tokenDepositField","tokenWithdrawField","tokenDepositAmount","depositToken","tokenWithdrawAmount","withdrawToken","CustomerDashboard","Tabs","defaultActiveKey","Tab","eventKey","title","showAll","Spinner","winnersSubmitted","App","loadBlockchainData","enable","net","getId","showDashboard","contractsLoaded","balancesLoaded","accountLoaded","rootReducer","combineReducers","action","loaded","data","depositAmount","balancesLoading","betCreating","findIndex","betAccepting","betCancelling","betClosing","winnerSubmitting","loggerMiddleware","createLogger","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preloadedState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","store","createStore","applyMiddleware","document","getElementById"],"mappings":"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","file":"static/js/main.83a952a1.chunk.js","sourcesContent":["import { get, reject } from 'lodash'\nimport { createSelector } from 'reselect'\n\nconst ADDRESS_0x0 = '0x0000000000000000000000000000000000000000'\n\n// WEB3\n\nconst account = state => get(state, 'web3.account')\nexport const accountSelector = createSelector(account, a => a)\n\nconst accountLoaded = state => get(state, 'web3.loaded', false)\nexport const accountLoadedSelector = createSelector(accountLoaded, l => l)\n\nconst web3 = state => get(state, 'web3.connection')\nexport const web3Selector = createSelector(web3, w => w)\n\n// TOKEN\n\nconst tokenLoaded = state => get(state, 'token.loaded', false)\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\n\nconst token = state => get(state, 'token.contract')\nexport const tokenSelector = createSelector(token, t => t)\n\nconst tokenBalanceLoaded = state => get(state, 'token.tokenBalance.loaded', false)\nexport const tokenBalanceLoadedSelector = createSelector(tokenBalanceLoaded, l => l)\n\nconst tokenBalance = state => get(state, 'token.tokenBalance.data', '0')\nexport const tokenBalanceSelector = createSelector(tokenBalance, tb => tb)\n\n// EXCHANGE\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\n\nconst exchange = state => get(state, 'exchange.contract')\nexport const exchangeSelector = createSelector(exchange, e => e)\n\nexport const contractsLoadedSelector = createSelector(\n    tokenLoadedSelector,\n    exchangeLoadedSelector,\n    (tl, el) => (tl && el) \n)\n\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\nexport const balancesLoadingSelector = createSelector(balancesLoading, s => s)\n\nconst exchangeTokenBalanceLoaded = state => get(state, 'exchange.exchangeTokenBalance.loaded', false)\nexport const exchangeTokenBalanceLoadedSelector = createSelector(exchangeTokenBalanceLoaded, l => l)\n\nconst exchangeTokenBalance = state => get(state, 'exchange.exchangeTokenBalance.data', '0')\nexport const exchangeTokenBalanceSelector = createSelector(exchangeTokenBalance, tb => tb)\n\nconst allBetsLoaded = state => get(state, 'exchange.allBets.loaded', false)\nexport const allBetsLoadedSelector = createSelector(allBetsLoaded, l => l)\n\nconst allBets = state => get(state, 'exchange.allBets.data', [])\nexport const allBetsSelector = createSelector(allBets, ab => ab)\n\nconst acceptedBetsLoaded = state => get(state, 'exchange.acceptedBets.loaded', false)\nexport const acceptedBetsLoadedSelector = createSelector(acceptedBetsLoaded, l => l)\n\nconst acceptedBets = state => get(state, 'exchange.acceptedBets.data', [])\nexport const acceptedBetsSelector = createSelector(acceptedBets, ab => ab)\n\nconst cancelledBetsLoaded = state => get(state, 'exchange.cancelledBets.loaded', false)\nexport const cancelledBetsLoadedSelector = createSelector(cancelledBetsLoaded, l => l)\n\nconst cancelledBets = state => get(state, 'exchange.cancelledBets.data', [])\nexport const cancelledBetsSelector = createSelector(cancelledBets, cb => cb)\n\nconst closedBetsLoaded = state => get(state, 'exchange.closedBets.loaded', false)\nexport const closedBetsLoadedSelector = createSelector(closedBetsLoaded, l => l)\n\nconst closedBets = state => get(state, 'exchange.closedBets.data', [])\nexport const closedBetsSelector = createSelector(closedBets, cb => cb)\n\nexport const allBetTypesLoadedSelector = createSelector(\n    allBetsLoaded,\n    acceptedBetsLoaded,\n    cancelledBetsLoaded,\n    closedBetsLoaded,\n    (a, b, c, d) => (a, b, c, d) \n)\n\nconst winnerSubmittedLoaded = state => get(state, 'exchange.winnerSubmitted.loaded', false)\nexport const winnerSubmittedLoadedSelector = createSelector(winnerSubmittedLoaded, l => l)\n\nconst winnerSubmitted = state => get(state, 'exchange.winnerSubmitted.data', [])\nexport const winnerSubmittedSelector = createSelector(winnerSubmitted, cb => cb)\n\n// bets: pending - all\n\nconst pendingBets = state => {\n    const all = allBets(state)\n    const accepted = acceptedBets(state)\n    const cancelled = cancelledBets(state)\n    const closed = closedBets(state)\n\n    const pendingBets = reject(all, (bet) => {\n        const betAccepted = accepted.some((b) => b.id === bet.id)\n        const betCancelled = cancelled.some((b) => b.id === bet.id)\n        const betClosed = closed.some((b) => b.id === bet.id)\n        return(betAccepted || betCancelled || betClosed)\n    })\n\n    return pendingBets\n}\n\n// // bets: pending - maker = account (proposed by account)\n\n// export const createdBetsMakerAccountSelector = createSelector(\n//     pendingBets, account,\n//     (pendingBets, account) => {\n//         pendingBets = pendingBets.filter((b) => b.maker === account)\n//         return(pendingBets)\n//     }\n// )\n\n// // bets: pending - taker = 0x0\n\n// export const createdBetsTaker0x0Selector = createSelector(\n//     pendingBets,\n//     (pendingBets) => {\n//         pendingBets = pendingBets.filter((b) => b.taker === '0x0000000000000000000000000000000000000000')\n//         return(pendingBets)\n//     }\n// )\n\n// // bets: pending - taker = account (proposed to account)\n\n// export const createdBetsTakerAccountSelector = createSelector(\n//     pendingBets, account,\n//     (pendingBets, account) => {\n//         pendingBets = pendingBets.filter((b) => b.taker === account)\n//         return(pendingBets)\n//     }\n// )\n\n// bets: pending - related to acccount\n\nexport const createdBetsForAccountSelector = createSelector(\n    pendingBets, account,\n    (pendingBets, account) => {\n    pendingBets = pendingBets.filter((b) => b.maker === account || b.taker === account || b.taker === '0x0000000000000000000000000000000000000000') // TODO: check this\n    pendingBets = decorateCreatedBetsForAccount(pendingBets, account)\n    console.log(\"pendingBets\", pendingBets)\n    return(pendingBets)\n    }\n)\n\nconst decorateCreatedBetsForAccount = (pendingBets, account) => {\n    return(\n        pendingBets.map((bet) => {\n            bet = addButtonText(bet, account)\n        return bet\n      })\n    )\n}\n\nconst addButtonText = (bet, account) => {\n    let buttonText\n  \n    if (bet.maker === account) {\n      buttonText = \"Cancel\"\n    } else {\n      buttonText = \"Accept\"\n    }\n\n    console.log('buttonText', buttonText)\n  \n    return({\n      ...bet,\n      buttonText\n    })\n}\n\n// bets: open - all\n\nconst openBets = state => {\n    const accepted = acceptedBets(state)\n    const cancelled = cancelledBets(state)\n    const closed = closedBets(state)\n\n    const openBets = reject(accepted, (bet) => {\n        const betCancelled = cancelled.some((b) => b.id === bet.id)\n        const betClosed = closed.some((b) => b.id === bet.id)\n        return(betCancelled || betClosed)\n    })\n\n    return openBets\n}\n\n// bets: open - maker or taker = account\n\nexport const openBetsForAccountSelector = createSelector(\n    openBets, account, winnerSubmitted,\n    (openBets, account, winnerSubmitted) => {\n        openBets = openBets.filter((b) => b.maker === account || b.taker === account)\n        openBets = decorateOpenBetsForAccount(openBets, account, winnerSubmitted)\n        return(openBets)\n    }\n)\n\nconst decorateOpenBetsForAccount = (openBets, account, winnerSubmitted) => {\n    return(\n        openBets.map((bet) => {\n            bet = addSubmittedWinner(bet, account, winnerSubmitted)\n            bet = addUpdatedMakerTakerWinners(bet, winnerSubmitted)\n        return bet\n      })\n    )\n}\n\nconst addSubmittedWinner = (bet, account, winnerSubmitted) => {\n    let submittedWinner = false\n    winnerSubmitted = winnerSubmitted.filter((w) => w.id === bet.id)\n\n    for (let i = 0; i < winnerSubmitted.length; i++) {\n        if ((winnerSubmitted[i].maker === account && winnerSubmitted[i].winnerMaker !== ADDRESS_0x0) || (winnerSubmitted[i].taker === account && winnerSubmitted[i].winnerTaker !== ADDRESS_0x0)) {\n            submittedWinner = true\n        }\n    }\n\n    console.log('submittedWinner', submittedWinner)\n  \n    return({\n      ...bet,\n      submittedWinner\n    })\n}\n\nconst addUpdatedMakerTakerWinners = (bet, winnerSubmitted) => {\n    let updatedWinnerMaker\n    let updatedWinnerTaker\n\n    winnerSubmitted = winnerSubmitted.filter((w) => w.id === bet.id)\n\n    for (let i = 0; i < winnerSubmitted.length; i++) {\n        if (winnerSubmitted[i].winnerMaker !== ADDRESS_0x0) {\n            updatedWinnerMaker = winnerSubmitted[i].winnerMaker\n        }\n        if (winnerSubmitted[i].winnerTaker !== ADDRESS_0x0) {\n            updatedWinnerTaker = winnerSubmitted[i].winnerTaker\n        }\n    }\n\n    console.log('updatedWinnerMaker', updatedWinnerMaker)\n    console.log('updatedWinnerTaker', updatedWinnerTaker)\n  \n    return({\n      ...bet,\n      updatedWinnerMaker,\n      updatedWinnerTaker\n    })\n}\n\n// bets: closed - maker or taker = account\n\nexport const closedBetsForAccountSelector = createSelector(\n    closedBets, account,\n    (closedBets, account) => {\n        closedBets = closedBets.filter((b) => b.maker === account || b.taker === account)\n        return(closedBets)\n    }\n)\n\n// balances\n\nexport const balancesLoadedSelector = createSelector(\n    tokenBalanceLoadedSelector,\n    exchangeTokenBalanceSelector,\n    (tb, eb) => (eb && eb) \n)\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null)\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount)\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null)\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount)\n\nconst newBet = state => get(state, 'exchange.newBet', {})\nexport const newBetSelector = createSelector(newBet, nb => nb)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { accountSelector } from '../store/selectors'\n\nclass Navbar extends Component {\n  render() {\n    return(\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n        <a className=\"navbar-brand\" href=\"#/\">Handshake Bets</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item\">\n            <a\n              className=\"nav-link small\"\n              // TODO: update this for all networks (or change to eth)\n              href={`https://rinkeby.etherscan.io/address/${this.props.account}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {this.props.account}\n            </a>\n          </li>\n        </ul>\n      </nav>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    account: accountSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(Navbar)\n\n","import React from 'react'\n\nexport default function ({ type }) {\n    if(type === 'table') {\n        return(<tbody className=\"spinner-border text-light text-center\"></tbody>)\n    } else {\n        return(<div className=\"spinner-border text-light text-center\"></div>)\n    }\n}","// WEB3\n\nexport function web3Loaded(connection) {\n  return {\n    type: 'WEB3_LOADED',\n    connection\n  }\n}\n\nexport function web3AccountLoaded(account) {\n  return {\n    type: 'WEB3_ACCOUNT_LOADED',\n    account\n  }\n}\n\n// TOKEN\n\nexport function tokenContractLoaded(contract) {\n  return {\n    type: 'TOKEN_CONTRACT_LOADED',\n    contract\n  }\n}\n\nexport function tokenBalanceLoaded(tokenBalance) {\n  return {\n    type: 'TOKEN_BALANCE_LOADED',\n    tokenBalance\n  }\n}\n\nexport function approvalForAllLoaded(approvalForAll) {\n  return {\n    type: 'APPROVAL_FOR_ALL_LOADED',\n    approvalForAll\n  }\n}\n\nexport function approvingExchange() {\n  return {\n    type: 'APPROVING_EXCHANGE'\n  }\n}\n\n\nexport function exchangeApproved(approval) {\n  return {\n    type: 'EXCHANGE_APPROVED',\n    approval\n  }\n}\n\n// EXCHANGE\n\nexport function exchangeContractLoaded(contract) {\n  return {\n    type: 'EXCHANGE_CONTRACT_LOADED',\n    contract\n  }\n}\n\nexport function depositAmountLoaded(depositAmount) {\n  return {\n    type: 'DEPOSIT_AMOUNT_LOADED',\n    depositAmount\n  }\n}\n\nexport function allBetsLoaded(allBets) {\n  return {\n    type: 'ALL_BETS_LOADED',\n    allBets\n  }\n}\n\nexport function acceptedBetsLoaded(acceptedBets) {\n  return {\n    type: 'ACCEPTED_BETS_LOADED',\n    acceptedBets\n  }\n}\n\nexport function cancelledBetsLoaded(cancelledBets) {\n  return {\n    type: 'CANCELLED_BETS_LOADED',\n    cancelledBets\n  }\n}\n\nexport function closedBetsLoaded(closedBets) {\n  return {\n    type: 'CLOSED_BETS_LOADED',\n    closedBets\n  }\n}\n\nexport function winnerSubmittedLoaded(winnerSubmitted) {\n  return {\n    type: 'WINNER_SUBMITTED_LOADED',\n    winnerSubmitted\n  }\n}\n\nexport function exchangeTokenBalanceLoaded(exchangeTokenBalance) {\n  return {\n    type: 'EXCHANGE_TOKEN_BALANCE_LOADED',\n    exchangeTokenBalance\n  }\n}\n\nexport function betCreated(bet) {\n  return {\n    type: 'BET_CREATED',\n    bet\n  }\n}\n\nexport function betAccepted(bet) {\n  return {\n    type: 'BET_ACCEPTED',\n    bet\n  }\n}\n\nexport function betCancelled(bet) {\n  return {\n    type: 'BET_CANCELLED',\n    bet\n  }\n}\n\nexport function betClosed(bet) {\n  return {\n    type: 'BET_CLOSED',\n    bet\n  }\n}\n\nexport function winnerSubmitted(bet) {\n  return {\n    type: 'WINNER_SUBMITTED',\n    bet\n  }\n}\n\nexport function betCreating() {\n  return {\n    type: 'BET_CREATING'\n  }\n}\n\nexport function betCancelling() {\n  return {\n    type: 'BET_CANCELLING'\n  }\n}\n\nexport function betAccepting() {\n  return {\n    type: 'BET_ACCEPTING'\n  }\n}\n\nexport function submittingWinner() {\n  return {\n    type: 'SUBMITTING_WINNER'\n  }\n}\n\nexport function tokenDepositAmountChanged(amount) {\n  return {\n      type: 'TOKEN_DEPOSIT_AMOUNT_CHANGED',\n      amount\n  }\n}\n\nexport function tokenWithdrawAmountChanged(amount) {\n  return {\n      type: 'TOKEN_WITHDRAW_AMOUNT_CHANGED',\n      amount\n  }\n}\n\nexport function newBetNameChanged(name) {\n  return {\n      type: 'NEW_BET_NAME_CHANGED',\n      name\n  }\n}\n\nexport function newBetTakerChanged(taker) {\n  return {\n      type: 'NEW_BET_TAKER_CHANGED',\n      taker\n  }\n}\n\nexport function newBetMakerAmountChanged(amount) {\n  return {\n      type: 'NEW_BET_MAKER_AMOUNT_CHANGED',\n      amount\n  }\n}\n\nexport function newBetTakerAmountChanged(amount) {\n  return {\n      type: 'NEW_BET_TAKER_AMOUNT_CHANGED',\n      amount\n  }\n}\n\n// COMBO\n\nexport function balancesLoading() {\n  return {\n    type: 'BALANCES_LOADING'\n  }\n}\n\nexport function balancesLoaded() {\n  return {\n    type: 'BALANCES_LOADED'\n  }\n}\n","import Web3 from 'web3'\n\nimport {\n  web3Loaded,\n  web3AccountLoaded,\n  tokenContractLoaded,\n  exchangeContractLoaded,\n  depositAmountLoaded,\n  allBetsLoaded,\n  acceptedBetsLoaded,\n  cancelledBetsLoaded,\n  closedBetsLoaded,\n  winnerSubmittedLoaded,\n  tokenBalanceLoaded,\n  exchangeTokenBalanceLoaded,\n  balancesLoaded,\n  betCreated,\n  betAccepted,\n  betCancelled,\n  betClosed,\n  winnerSubmitted,\n  betCreating,\n  betCancelling,\n  betAccepting,\n  submittingWinner,\n  balancesLoading\n  // approvingExchange,\n  // approvalForAllLoaded,\n  // exchangeApproved\n} from './actions.js'\n\nimport Token from '../abis/Token.json'\nimport Exchange from '../abis/Exchange.json'\n\n// WEB3\n\nexport const loadWeb3 = async (dispatch) => {\n  //console.log('window.ethereum: ', window.ethereum)\n  if(typeof window.ethereum !== 'undefined'){\n    const web3 = new Web3(window.ethereum)\n    dispatch(web3Loaded(web3))\n    return web3\n  } else {\n    window.alert('Please install MetaMask')\n    window.location.assign('https://metamask.io/')\n  }\n}\n\n// ACCOUNT\n\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.getAccounts()\n  const account = await accounts[0]\n  if(typeof account !== 'undefined') {\n    dispatch(web3AccountLoaded(account))\n    return account\n  } else {\n    window.alert('Please login with MetaMask')\n    return null\n  }\n}\n\n// TOKEN\n\nexport const loadTokenContract = async (web3, networkId, dispatch) => {\n  try {\n    const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n    dispatch(tokenContractLoaded(token))\n    return token\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\n// // TODO: need this?\n// export const loadApprovalForAll = async (token, dispatch) => {\n//   const approvalForAllStream = await token.getPastEvents('ApprovalForAll', { fromBlock: 0, toBlock: 'latest' })\n//   console.log('approvalForAll stream: ', approvalForAllStream)\n//   const approvalForAll = approvalForAllStream.map((event) => event.returnValues)\n//   dispatch(approvalForAllLoaded(approvalForAll))\n// }\n\n// // TODO: need this? - check on deposit?\n// export const approveExchange = (account, token, exchange, amount, dispatch) => {\n//   token.methods.approve(exchange.options.address, amount).send({ from: account })\n//   .on('transactionHash', (hash) => {\n//     dispatch(approvingExchange())\n//   })\n//   .on('error',(error) => {\n//     console.error(error)\n//     window.alert(`There was an error!`)\n//   })\n// }\n\n// export const loadTokenEvents = async (exchange, dispatch) => {\n//   // approval for all\n//   const approvalForAllStream = await exchange.getPastEvents('ApprovalForAll', { fromBlock: 0, toBlock: 'latest' })\n//   const approvalForAll = approvalForAllStream.map((event) => event.returnValues)\n//   dispatch(allBetsLoaded(approvalForAll))\n// }\n\n// EXCHANGE\n\nexport const loadExchangeContract = async (web3, networkId, dispatch) => {\n  try {\n    const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\n    dispatch(exchangeContractLoaded(exchange))\n    return exchange\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const getDepositAmount = async (exchange, dispatch) => {\n  const depositAmount = await exchange.methods.depositAmount().call()\n  dispatch(depositAmountLoaded(depositAmount))\n}\n\nexport const loadExchangeEvents = async (exchange, dispatch) => {\n  // all bets\n  const allBetsStream = await exchange.getPastEvents('BetCreated', { fromBlock: 0, toBlock: 'latest' })\n  console.log('allBetsStream: ', allBetsStream)\n  const allBets = allBetsStream.map((event) => event.returnValues)\n  dispatch(allBetsLoaded(allBets))\n\n  // accepted bets\n  const acceptedBetsStream = await exchange.getPastEvents('BetAccepted', { fromBlock: 0, toBlock: 'latest' })\n  const acceptedBets = acceptedBetsStream.map((event) => event.returnValues)\n  dispatch(acceptedBetsLoaded(acceptedBets))\n\n  // cancelled bets\n  const cancelledBetsStream = await exchange.getPastEvents('BetCancelled', { fromBlock: 0, toBlock: 'latest' })\n  console.log('cancelledBetsStream: ', cancelledBetsStream)\n  const cancelledBets = cancelledBetsStream.map((event) => event.returnValues)\n  dispatch(cancelledBetsLoaded(cancelledBets))\n\n  // closed bets\n  const closedBetsStream = await exchange.getPastEvents('BetClosed', { fromBlock: 0, toBlock: 'latest' })\n  const closedBets = closedBetsStream.map((event) => event.returnValues)\n  dispatch(closedBetsLoaded(closedBets))\n\n  // winner submitted\n  const winnerSubmittedStream = await exchange.getPastEvents('WinnerSubmitted', { fromBlock: 0, toBlock: 'latest' })\n  const winnerSubmitted = winnerSubmittedStream.map((event) => event.returnValues)\n  dispatch(winnerSubmittedLoaded(winnerSubmitted))\n}\n\nexport const loadBalances = async (account, token, exchange, dispatch) => {\n  console.log(\"account\", account)\n  console.log(\"token\", token)\n  console.log(\"exchange\", exchange)\n\n  if(typeof account !== 'undefined') {\n    // token balance in wallet\n    const tokenBalance = await token.methods.balanceOf(account).call()\n    dispatch(tokenBalanceLoaded(tokenBalance))\n    \n    // token balance in exchange contract\n    const exchangeTokenBalance = await exchange.methods.balanceOf(token.options.address, account).call()\n    dispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance))\n\n    console.log('AML tokenBalance: ', tokenBalance)\n    console.log('AML exchangeTokenBalance: ', exchangeTokenBalance)\n\n    // all balances loaded\n    dispatch(balancesLoaded())\n\n  } else {\n    window.alert('Please login with MetaMask - trying to load balances, but account undefined')\n  }\n}\n\n// create bet\n\nexport const createBet = (web3, account, token, exchange, bet, dispatch) => {\n  const addressToken = token.options.address\n  const addressTaker = bet.taker\n  // const amountMaker = web3.utils.toWei(bet.amountMaker, 'ether')\n  // const amountTaker = web3.utils.toWei(bet.amountTaker, 'ether')\n  const amountMaker = bet.amountMaker\n  const amountTaker = bet.amountTaker\n  const name = bet.name\n\n  console.log('addressToken', addressToken)\n  console.log('addressTaker', addressTaker)\n  console.log('amountMaker', amountMaker)\n  console.log('amountTaker', amountTaker)\n  console.log('name', name)\n\n  exchange.methods.createBet(addressToken, addressTaker, amountMaker, amountTaker, name).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(betCreating())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\n// cancel bet\n\nexport const cancelBet = (account, exchange, bet, dispatch) => {\n  exchange.methods.cancelBet(bet.id).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(betCancelling())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\n// accept bet\n\nexport const acceptBet = (account, exchange, bet, dispatch) => {\n  console.log('account', account)\n  console.log('exchange', exchange)\n  console.log('bet.id', bet.id)\n  exchange.methods.acceptBet(bet.id).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(betAccepting())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\n// submit winner - TODO: check bet/winner how to handle\nexport const submitWinner = (account, exchange, bet, winner, dispatch) => {\n  exchange.methods.submitWinner(bet.id, winner).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(submittingWinner())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\n// deposit token - TODO: check approving methods\n\nexport const depositToken = (web3, account, token, exchange, amount, dispatch) => {\n  //amount = web3.utils.toWei(amount, 'ether')\n  \n  exchange.methods.depositToken(token.options.address, amount).send({ from: account })\n    .on('transactionHash', (hash) => {\n      dispatch(balancesLoading())\n    })\n    .on('error',(error) => {\n      console.error(error)\n      window.alert(`There was an error!`)\n    })\n}\n\n// withdraw token\n\nexport const withdrawToken = (web3, account, token, exchange, amount, dispatch) => {\n  exchange.methods.withdrawToken(token.options.address, amount).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(balancesLoading())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\n// BOTH\n\n// subscribe to all events\n\nexport const subscribeToEvents = async (exchange, dispatch) => {\n  // deposit\n  exchange.events.Deposit({}, (error, event) => {\n    dispatch(balancesLoaded())\n  })\n\n  // withdraw\n  exchange.events.Withdraw({}, (error, event) => {\n    dispatch(balancesLoaded())\n  })\n\n  // bet created\n  exchange.events.BetCreated({}, (error, event) => {\n    dispatch(betCreated(event.returnValues))\n  })\n\n  // bet accepted\n  exchange.events.BetAccepted({}, (error, event) => {\n    dispatch(betAccepted(event.returnValues))\n  })\n\n  // bet cancelled\n  exchange.events.BetCancelled({}, (error, event) => {\n    dispatch(betCancelled(event.returnValues))\n  })\n\n  // bet closed\n  exchange.events.BetClosed({}, (error, event) => {\n    dispatch(betClosed(event.returnValues))\n  })\n\n  // winner submitted\n  exchange.events.WinnerSubmitted({}, (error, event) => {\n    dispatch(winnerSubmitted(event.returnValues))\n  })\n\n  // // TODO: need this? appoval for all - can be done in deposit call\n  // token.events.ApprovalForAll({}, (error, event) => {\n  //   dispatch(exchangeApproved(event.returnValues))\n  // })\n}","import React, { Component } from 'react'\nimport { connect } from \"react-redux\"\nimport { Tab, Tabs } from 'react-bootstrap'\nimport Spinner from './Spinner'\nimport {\n  accountSelector,\n  allBetTypesLoadedSelector,\n  closedBetsForAccountSelector,\n  createdBetsForAccountSelector,\n  exchangeSelector,\n  exchangeTokenBalanceSelector,\n  openBetsForAccountSelector,\n  tokenBalanceSelector,\n  tokenSelector,\n  winnerSubmittedSelector,\n  tokenDepositAmountSelector,\n  tokenWithdrawAmountSelector,\n  newBetSelector\n} from '../store/selectors'\nimport {\n  createBet,\n  cancelBet,\n  acceptBet,\n  submitWinner,\n  loadBalances,\n  depositToken,\n  withdrawToken\n} from '../store/interactions'\nimport {\n  newBetNameChanged,\n  newBetTakerChanged,\n  newBetMakerAmountChanged,\n  newBetTakerAmountChanged,\n  tokenDepositAmountChanged,\n  tokenWithdrawAmountChanged\n} from '../store/actions'\n\nconst newBetForm = (props) => {\n  const {\n    dispatch,\n    exchange,\n    token,\n    web3,\n    account,\n    newBet\n  } = props\n\n  return(\n    <form onSubmit={(event) => {\n      event.preventDefault()\n      console.log('button clicked new bet')\n      createBet(web3, account, token, exchange, newBet, dispatch)\n    }}>\n      <div className=\"form-group small\">\n        <label>Name</label>\n        <div className=\"input-group\"></div>\n          <input\n          type=\"text\"\n          placeholder=\"Describe your bet\"\n          onChange={(e) => dispatch(newBetNameChanged(e.target.value))}\n          className=\"form-control form-control-sm bg-dark text-white\"\n          required\n        />\n        <label>Taker</label>\n        <div className=\"input-group\"></div>\n          <input\n          type=\"text\"\n          placeholder=\"Taker address\"\n          onChange={(e) => dispatch(newBetTakerChanged(e.target.value))}\n          className=\"form-control form-control-sm bg-dark text-white\"\n          required\n        />\n        <label>Maker Amount</label>\n        <div className=\"input-group\"></div>\n          <input\n          type=\"text\"\n          placeholder=\"Amount maker will wager\"\n          onChange={(e) => dispatch(newBetMakerAmountChanged(e.target.value))}\n          className=\"form-control form-control-sm bg-dark text-white\"\n          required\n        />\n        <label>Taker Amount</label>\n        <div className=\"input-group\"></div>\n          <input\n          type=\"text\"\n          placeholder=\"Amount taker will wager\"\n          onChange={(e) => dispatch(newBetTakerAmountChanged(e.target.value))}\n          className=\"form-control form-control-sm bg-dark text-white\"\n          required\n        />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary btm-sm btn-black\">Create Bet</button>\n    </form>\n  )\n}\n\nconst showPendingBets = (props) => {\n  const {\n    createdBets\n  } = props\n\n  console.log('createdBets: ', createdBets.length)\n\n  return(\n    <tbody>\n      { createdBets.map((bet) => {\n        return(\n          <tr className={`nft-${bet.id}`} key={bet.id}>\n            <td>{bet.id}</td>\n            <td>{bet.name}</td>\n            <td>{bet.maker}</td>\n            <td>{bet.taker}</td>\n            <td>{bet.amountMaker}</td>\n            <td>{bet.amountTaker}</td>\n            <td\n              className=\"text-muted cancel-order\"\n              onClick={(e) => {\n                completePendingBetAction(props, bet)\n              }}\n            >{bet.buttonText}</td>\n          </tr>\n        )\n      })\n      }\n    </tbody>\n  )\n}\n\nconst completePendingBetAction = (props, bet) => {\n  const {\n    account,\n    exchange,\n    dispatch\n  } = props\n\n  switch(bet.buttonText) {\n    case \"Cancel\":\n      console.log(\"AML pending bet action text: cancel\")\n      cancelBet(account, exchange, bet, dispatch) \n      break\n    case \"Accept\":\n      console.log(\"AML pending bet action text: accept\")\n      acceptBet(account, exchange, bet, dispatch) \n      break\n    default:\n      console.log(\"AML no button text action\")\n  }\n}\n\nconst showActiveBets = (props) => {\n  const {\n    activeBets\n  } = props\n\n  console.log('activeBets: ', activeBets.length)\n\n  return(\n    <tbody>\n      { activeBets.map((bet) => {\n        return(\n          <tr className={`nft-${bet.id}`} key={bet.id}>\n            <td>{bet.id}</td>\n            <td>{bet.name}</td>\n            <td>{bet.maker}</td>\n            <td>{bet.taker}</td>\n            <td>{bet.amountMaker}</td>\n            <td>{bet.amountTaker}</td>\n            <td>{bet.updatedWinnerMaker}</td>\n            <td>{bet.updatedWinnerTaker}</td>\n            <td\n              className=\"text-muted cancel-order\"\n              onClick={(e) => {\n                submitWinningAddress(props, bet, bet.maker)\n              }}\n            >Submit Winner - Maker</td>\n            <td\n              className=\"text-muted cancel-order\"\n              onClick={(e) => {\n                submitWinningAddress(props, bet, bet.taker)\n              }}\n            >Submit Winner - Taker</td>\n          </tr>\n        )\n      })\n      }\n    </tbody>\n  )\n}\n\nconst submitWinningAddress = (props, bet, winner) => {\n  const {\n    account,\n    exchange,\n    dispatch\n  } = props\n\n  submitWinner(account, exchange, bet, winner, dispatch)\n}\n\nconst showClosedBets = (props) => {\n  const {\n    closedBets\n  } = props\n\n  console.log('closedBets: ', closedBets.length)\n\n  return(\n    <tbody>\n      { closedBets.map((bet) => {\n        return(\n          <tr className={`nft-${bet.id}`} key={bet.id}>\n            <td>{bet.id}</td>\n            <td>{bet.name}</td>\n            <td>{bet.maker}</td>\n            <td>{bet.taker}</td>\n            <td>{bet.amountMaker}</td>\n            <td>{bet.amountTaker}</td>\n            <td>{bet.winnerMaker}</td>\n          </tr>\n        )\n      })\n      }\n    </tbody>\n  )\n}\n\nconst balancesForm = (props) => {\n  const {\n    tokenBalance,\n    exchangeTokenBalance\n  } = props\n  \n  return(\n    <div>\n      <table className=\"table table-dark table-sm small\">\n      <thead>\n          <tr>\n            <th>Token</th>\n            <th>Wallet</th>\n            <th>Exchange</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>$HAKES</td>\n            <td>{tokenBalance}</td>\n            <td>{exchangeTokenBalance}</td>\n          </tr>\n        </tbody>\n      </table>\n      { tokenDepositField(props) }\n      { tokenWithdrawField(props) }\n    </div>\n  )\n}\n\nconst tokenDepositField = (props) => {\n  const {\n    dispatch,\n    exchange,\n    web3,\n    token,\n    tokenDepositAmount,\n    account\n  } = props\n\n  return(\n    <form className=\"row\" onSubmit={(event) => {\n      event.preventDefault()\n      depositToken(web3, account, token, exchange, tokenDepositAmount, dispatch)\n    }}>\n      <div className=\"col-12 col-sm pr-sm-2\">\n        <input\n        type=\"text\"\n        placeholder=\"$HAKES amount\"\n        onChange={(e) => dispatch(tokenDepositAmountChanged(e.target.value))}\n        className=\"form-control form-control-sm bg-dark text-white\"\n        required />\n      </div>\n      <div className=\"col-12 col-sm-auto pl-sm-0\">\n        <button type=\"submit\" className=\"btn btn-primary btn-black btm-sm\">Deposit</button>\n      </div>\n  </form>\n  )\n}\n\nconst tokenWithdrawField = (props) => {\n  const {\n    dispatch,\n    exchange,\n    web3,\n    token,\n    tokenWithdrawAmount,\n    account\n  } = props\n\n  return(\n    <form className=\"row\" onSubmit={(event) => {\n      event.preventDefault()\n      withdrawToken(web3, account, token, exchange, tokenWithdrawAmount, dispatch)\n    }}>\n      <div className=\"col-12 col-sm pr-sm-2\">\n        <input\n        type=\"text\"\n        placeholder=\"$HAKES amount\"\n        onChange={(e) => dispatch(tokenWithdrawAmountChanged(e.target.value))}\n        className=\"form-control form-control-sm bg-dark text-white\"\n        required />\n      </div>\n      <div className=\"col-12 col-sm-auto pl-sm-0\">\n        <button type=\"submit\" className=\"btn btn-primary btn-black btm-sm\">Withdraw</button>\n      </div>\n  </form>\n  )\n}\n\nclass CustomerDashboard extends Component {\n  // componentWillMount() {\n  //   this.loadBlockchainData(this.props)\n  // }\n\n  // async loadBlockchainData(props) {\n  //   const {\n  //     account,\n  //     token,\n  //     exchange,\n  //     dispatch\n  //   } = props\n\n  //   await loadBalances(account, token, exchange, dispatch)\n  // }\n\n  render() {\n    return (\n      <div className=\"card bg-dark text-white\">\n        <div className=\"card-header\">\n          Customer Dashboard\n        </div>\n        <div className=\"card-body\">\n          <Tabs defaultActiveKey=\"create\" className=\"bg-dark text-white\">\n            <Tab eventKey=\"create\" title=\"Create\" className=\"bg-dark\">\n              { newBetForm(this.props) }\n            </Tab>\n            <Tab eventKey=\"pending\" title=\"Pending\" className=\"bg-dark\">\n              <table className=\"table table-dark table-sm small\">\n                <thead>\n                  <tr>\n                    <th>ID</th>\n                    <th>Name</th>\n                    <th>Maker</th>\n                    <th>Taker</th>\n                    <th>Amount Maker</th>\n                    <th>Amount Taker</th>\n                  </tr>\n                </thead>\n                { this.props.showAll ? showPendingBets(this.props) : <Spinner type=\"table\"/> }\n              </table>\n            </Tab>\n            <Tab eventKey=\"active\" title=\"Active\" className=\"bg-dark\">\n              <table className=\"table table-dark table-sm small break\">\n                <thead>\n                  <tr>\n                    <th>ID</th>\n                    <th>Name</th>\n                    <th>Maker</th>\n                    <th>Taker</th>\n                    <th>Amount Maker</th>\n                    <th>Amount Taker</th>\n                    <th>Winner Maker</th>\n                    <th>Winner Taker</th>\n                  </tr>\n                </thead>\n                { this.props.showAll ? showActiveBets(this.props) : <Spinner type=\"table\"/> }\n              </table>\n            </Tab>\n            <Tab eventKey=\"closed\" title=\"Closed\" className=\"bg-dark\">\n              <table className=\"table table-dark table-sm small\">\n                <thead>\n                  <tr>\n                  <th>ID</th>\n                    <th>Name</th>\n                    <th>Maker</th>\n                    <th>Taker</th>\n                    <th>Amount Maker</th>\n                    <th>Amount Taker</th>\n                    <th>Winner</th>\n                  </tr>\n                </thead>\n                { this.props.showAll ? showClosedBets(this.props) : <Spinner type=\"table\"/> }\n              </table>\n            </Tab>\n            <Tab eventKey=\"balances\" title=\"Balances\" className=\"bg-dark\">\n              { balancesForm(this.props) }\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const allBetTypesLoaded = allBetTypesLoadedSelector(state)\n  \n  return {\n    showAll: allBetTypesLoaded,\n    account: accountSelector(state),\n    token: tokenSelector(state),\n    exchange: exchangeSelector(state),\n    createdBets: createdBetsForAccountSelector(state),\n    activeBets: openBetsForAccountSelector(state),\n    closedBets: closedBetsForAccountSelector(state),\n    winnersSubmitted: winnerSubmittedSelector(state),\n    tokenBalance: tokenBalanceSelector(state),\n    exchangeTokenBalance: exchangeTokenBalanceSelector(state),\n    tokenDepositAmount: tokenDepositAmountSelector(state),\n    tokenWithdrawAmount: tokenWithdrawAmountSelector(state),\n    newBet: newBetSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(CustomerDashboard)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport './App.css'\nimport Navbar from './Navbar'\nimport Spinner from './Spinner'\nimport {\n  loadWeb3,\n  loadAccount,\n  loadTokenContract,\n  loadExchangeContract,\n  loadExchangeEvents,\n  subscribeToEvents,\n  loadBalances\n} from '../store/interactions'\nimport {\n  accountLoadedSelector,\n  contractsLoadedSelector,\n  balancesLoadedSelector\n} from '../store/selectors'\nimport CustomerDashboard from './CustomerDashboard'\n\nclass App extends Component {\n  componentWillMount() {\n    this.loadBlockchainData(this.props)\n  }\n\n  async loadBlockchainData(props) {\n    const {\n      dispatch\n    } = props\n\n    await window.ethereum.enable() // not sure if need this?\n    const web3 = await loadWeb3(dispatch)\n    const networkId = await web3.eth.net.getId()\n    \n    let account = await loadAccount(web3, dispatch)\n\n    const token = await loadTokenContract(web3, networkId, dispatch)\n    if (!token) {\n      window.alert('Token smart contract not detected on the current network. Please select another network with Metamark.')\n    }\n\n    const exchange = await loadExchangeContract(web3, networkId, dispatch)\n    if (!exchange) {\n      window.alert('Exchange smart contract not detected on the current network. Please select another network with Metamark.')\n    }\n\n    await loadExchangeEvents(exchange, dispatch)\n    await subscribeToEvents(exchange, dispatch)\n    await loadBalances(account, token, exchange, dispatch)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        { this.props.showDashboard ? <CustomerDashboard /> : <Spinner /> }\n        {/* <CustomerDashboard /> */}\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const contractsLoaded = contractsLoadedSelector(state)\n  const balancesLoaded = balancesLoadedSelector(state)\n  \n  return {\n    accountLoaded: accountLoadedSelector(state),\n    showDashboard: contractsLoaded && balancesLoaded\n  }\n}\n\nexport default connect(mapStateToProps)(App)","import { combineReducers } from 'redux';\n\n// WEB 3\nfunction web3(state = {}, action) {\n  switch (action.type) {\n  case 'WEB3_LOADED':\n      return { ...state, connection: action.connection }\n  case 'WEB3_ACCOUNT_LOADED':\n      return { ...state, loaded: true, account: action.account }\n  default:\n      return state\n  }\n}\n\n// TOKEN\n\nfunction token(state = {}, action) {\n  switch(action.type) {\n    case 'TOKEN_CONTRACT_LOADED':\n      return { ...state, loaded: true, contract: action.contract }\n    case 'TOKEN_BALANCE_LOADED':\n      return { ...state, tokenBalance: { loaded: true, data: action.tokenBalance} }\n    // case 'APPROVAL_FOR_ALL_LOADED':\n    //     return { ...state, approvalForAll: { loaded: true, data: action.approvalForAll } } \n    // case 'APPROVING_EXCHANGE':\n    //   return {\n    //     ...state,\n    //     approvalForAll: {\n    //       loaded: false,\n    //       data: [\n    //         ...state.approvalForAll.data,\n    //       ]\n    //     }\n    //   }\n    // case 'EXCHANGE_APPROVED':\n    //   return {\n    //     ...state,\n    //     approvalForAll: {\n    //       loaded: true,\n    //       data: [\n    //         ...state.approvalForAll.data,\n    //         action.approval\n    //       ]\n    //     }\n    //   }\n    default:\n      return state\n  }\n}\n\n// EXCHANGE\n\nfunction exchange(state = {}, action) {\n  let index, data\n\n  switch(action.type) {\n    case 'EXCHANGE_CONTRACT_LOADED':\n      return { ...state, loaded: true, contract: action.contract }\n    case 'DEPOSIT_AMOUNT_LOADED':\n      return { ...state, loaded: true, depositAmount: action.depositAmount }\n    case 'ALL_BETS_LOADED':\n      return { ...state, allBets: { loaded: true, data: action.allBets} }\n    case 'ACCEPTED_BETS_LOADED':\n      return { ...state, acceptedBets: { loaded: true, data: action.acceptedBets} }\n    case 'CANCELLED_BETS_LOADED':\n      return { ...state, cancelledBets: { loaded: true, data: action.cancelledBets} }\n    case 'CLOSED_BETS_LOADED':\n      return { ...state, closedBets: { loaded: true, data: action.closedBets} }\n    case 'WINNER_SUBMITTED_LOADED':\n      return { ...state, winnerSubmitted: { loaded: true, data: action.winnerSubmitted} }\n    case 'EXCHANGE_TOKEN_BALANCE_LOADED':\n      return { ...state, exchangeTokenBalance: { loaded: true, data: action.exchangeTokenBalance} }\n    case 'BALANCES_LOADING':\n      return { ...state, balancesLoading: true }\n    case 'BALANCES_LOADED':\n      return { ...state, balancesLoading: false }\n    case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\n      return { ...state, tokenDepositAmount: action.amount }\n    case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\n      return { ...state, tokenWithdrawAmount: action.amount }\n    case 'NEW_BET_NAME_CHANGED':\n      return { ...state, newBet: { ...state.newBet, name: action.name } }\n    case 'NEW_BET_TAKER_CHANGED':\n      return { ...state, newBet: { ...state.newBet, taker: action.taker } }\n    case 'NEW_BET_MAKER_AMOUNT_CHANGED':\n      return { ...state, newBet: { ...state.newBet, amountMaker: action.amount } }\n    case 'NEW_BET_TAKER_AMOUNT_CHANGED':\n      return { ...state, newBet: { ...state.newBet, amountTaker: action.amount } }\n    \n    \n        case 'BET_CREATING':\n      return { ...state, betCreating: true }\n    case 'BET_CREATED':\n      // prevent duplicate orders\n      index = state.allBets.data.findIndex(bet => bet.id === action.bet.id);\n      \n      if(index === -1) {\n          data = [...state.allBets.data, action.bet]\n      } else {\n          data = state.allBets.data\n      }\n\n      return {\n          ...state,\n          betCreating: false,\n          allBets: {\n              ...state.allBets,\n              data\n          },\n      }\n    case 'BET_ACCEPTING':\n      return { ...state, betAccepting: true }\n    case 'BET_ACCEPTED':\n      // prevent duplicate orders\n      index = state.acceptedBets.data.findIndex(bet => bet.id === action.bet.id);\n      \n      if(index === -1) {\n          data = [...state.acceptedBets.data, action.bet]\n      } else {\n          data = state.acceptedBets.data\n      }\n\n      return {\n          ...state,\n          betAccepting: false,\n          acceptedBets: {\n              ...state.acceptedBets,\n              data\n          },\n      }\n    case 'BET_CANCELLING':\n      return { ...state, betCancelling: true }\n    case 'BET_CANCELLED':\n      // prevent duplicate orders\n      index = state.cancelledBets.data.findIndex(bet => bet.id === action.bet.id);\n      \n      if(index === -1) {\n          data = [...state.cancelledBets.data, action.bet]\n      } else {\n          data = state.cancelledBets.data\n      }\n\n      return {\n          ...state,\n          betCancelling: false,\n          cancelledBets: {\n              ...state.cancelledBets,\n              data\n          },\n      }\n    case 'BET_CLOSED':\n      // prevent duplicate orders\n      index = state.closedBets.data.findIndex(bet => bet.id === action.bet.id);\n      \n      if(index === -1) {\n          data = [...state.closedBets.data, action.bet]\n      } else {\n          data = state.closedBets.data\n      }\n\n      return {\n          ...state,\n          betClosing: false,\n          closedBets: {\n              ...state.closedBets,\n              data\n          },\n      }\n    case 'SUBMITTING_WINNER':\n      return { ...state, winnerSubmitting: true }\n    case 'WINNER_SUBMITTED':\n      // prevent duplicate orders\n      index = state.winnerSubmitted.data.findIndex(bet => bet.id === action.bet.id);\n      \n      if(index === -1) {\n          data = [...state.winnerSubmitted.data, action.bet]\n      } else {\n          data = state.winnerSubmitted.data\n      }\n\n      return {\n          ...state,\n          winnerSubmitting: false,\n          winnerSubmitted: {\n              ...state.winnerSubmitted,\n              data\n          },\n      }\n    default:\n      return state\n  }\n}\n\n// ROOT\n\nconst rootReducer = combineReducers({\n  web3,\n  token,\n  exchange\n})\n\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from \"./reducers\"\n\nconst loggerMiddleware = createLogger()\nconst middleware = []\n\n// for redux dev tools - allows connedtion to app\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App'\nimport configureStore from './store/configureStore'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}